# -*- coding: utf-8 -*-
"""Atividadee_tabela_hash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KV3l-ZrAcRk4cW2ptY4GvS7SiLYRNM1A
"""

class HashTable:
    def __init__(self):
        self.size = 10
        self.T = [None] * self.size

    def first_level_hash(self, key_str):
        num = 0
        for c in key_str:
            num += ord(c)
        return num % self.size

    def second_level_hash(self, key_str):
        num = 0
        for c in key_str:
            num += ord(c)
        return num % (self.size // 10)

    def insert(self, key, value):
        first_level_index = self.first_level_hash(key)
        if self.T[first_level_index] is None:
            self.T[first_level_index] = [None] * (self.size // 10)

        second_level_index = self.second_level_hash(key)
        if self.T[first_level_index][second_level_index] is None:
            self.T[first_level_index][second_level_index] = []

        self.T[first_level_index][second_level_index].append((key, value))

    def get(self, key):
        first_level_index = self.first_level_hash(key)
        if self.T[first_level_index] is not None:
            second_level_index = self.second_level_hash(key)
            if self.T[first_level_index][second_level_index] is not None:
                for k, v in self.T[first_level_index][second_level_index]:
                    if k == key:
                        return v
        return None

    def print(self):
        print("{")
        for i in range(self.size):
            if self.T[i] is not None:
                for j in range(len(self.T[i])):
                    if self.T[i][j] is not None:
                        _str = ""
                        for key, value in self.T[i][j]:
                            _str += f"({key}, {value}) "
                        print(f"[{_str}]")
        print("}")


def main():
    hash_table = HashTable()

    hash_table.insert("key1", "value1")
    hash_table.insert("key2", "value2")
    hash_table.insert("key11", "value11")
    hash_table.insert("key21", "value21")

    hash_table.print()

    print("Getting key1:", hash_table.get("key1"))
    print("Getting key2:", hash_table.get("key2"))
    print("Getting key11:", hash_table.get("key11"))
    print("Getting key21:", hash_table.get("key21"))
    print("Getting non-existent key:", hash_table.get("non-existent-key"))


if __name__ == "__main__":
    main()